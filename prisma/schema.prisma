// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum WalletStatus {
  UNUSED    // Never used for deposits
  PENDING   // Deposit detected but not fully processed
  USED      // Successfully processed deposit
  FAILED    // Failed deposit processing
}

model DisposableWallet {
  id            String   @id @default(cuid())
  userId        String
  network       String   // ethereum, bsc, polygon, solana, tron, busd
  address       String
  privateKey    String
  derivationPath String
  qrCode        String?
  status        WalletStatus @default(UNUSED)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  deposits      Deposit[]
  depositWatches DepositWatch[]

  // Indexes for performance
  @@unique([address]) // Ensure unique addresses across all wallets
  @@index([userId])
  @@index([network])
  @@index([status])
  @@index([createdAt])

  @@map("disposable_wallets")
}

model Deposit {
  id            String   @id @default(cuid())
  userId        String
  walletId      String
  wallet        DisposableWallet @relation(fields: [walletId], references: [id])
  amount        String
  currency      String   @default("USDT")
  network       String
  txId          String   @unique
  walletAddress String
  confirmations Int      @default(0)
  status        DepositStatus @default(PENDING)
  webhookSent   Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  webhookLogs WebhookLog[]
  forwardTransactions ForwardTransaction[]

  @@map("deposits")
}

enum DepositStatus {
  PENDING
  CONFIRMED
  FAILED
}

model ForwardTransaction {
  id            String   @id @default(cuid())
  depositId     String
  deposit       Deposit  @relation(fields: [depositId], references: [id])
  forwardTxHash String
  network       String
  amount        String
  status        ForwardStatus @default(PENDING)
  error         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("forward_transactions")
}

enum ForwardStatus {
  PENDING
  COMPLETED
  FAILED
}

model WebhookLog {
  id            String   @id @default(cuid())
  depositId     String
  deposit       Deposit  @relation(fields: [depositId], references: [id])
  url           String
  payload       String   // JSON string
  signature     String
  statusCode    Int?
  response      String?
  retryCount    Int      @default(0)
  createdAt     DateTime @default(now())

  @@map("webhook_logs")
}

model DepositWatch {
  id                String   @id @default(cuid())
  userId            String
  walletId          String
  wallet            DisposableWallet @relation(fields: [walletId], references: [id])
  address           String
  network           String
  token             String   @default("USDT") // Specific token to watch for (USDT, BUSD, etc.)
  expectedAmount    String   // Expected deposit amount
  actualAmount      String?  // Actual amount received (if any)
  confirmations     Int      @default(0)
  status            WatchStatus @default(ACTIVE)
  expiresAt         DateTime // 1 hour from creation
  webhookSent       Boolean  @default(false)
  webhookUrl        String?  // URL to send webhook to
  txHash            String?  // Transaction hash if deposit found
  paymentId         String?  // Payment ID from credo for linking to specific deposit request
  lastCheckedAt     DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("deposit_watches")
}

enum WatchStatus {
  ACTIVE      // Currently watching
  CONFIRMED   // Deposit confirmed (5+ confirmations)
  EXPIRED     // 1 hour expired without deposit
  INACTIVE    // Manually stopped
} 